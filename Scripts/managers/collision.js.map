{"version":3,"sources":["managers/collision.ts"],"names":[],"mappings":"AAAA,IAAO,QAAQ,CAkCd;AAlCD,WAAO,QAAQ,EAAC,CAAC;IACb,0BAA0B;IAC1B;QAGI,mBAAY,MAAqB;YAC7B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAC1B,CAAC;QAEM,4BAAQ,GAAf,UAAgB,UAAyB,EAAE,QAAuB;YAC9D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;QACrG,CAAC;QAEM,yBAAK,GAAZ,UAAa,MAAyB;YAClC,IAAI,UAAU,GAAkB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACrD,IAAI,QAAQ,GAAkB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACnD,IAAI,gBAAgB,GAAU,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;YACxD,IAAI,gBAAgB,GAAU,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;YAClD,IAAI,eAAe,GAAU,gBAAgB,GAAG,gBAAgB,CAAC;YAEjE,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9B,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAE9B,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;YACvC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;YAGvC;mEACuD;YACvD,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;gBACvD,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC;QACL,gBAAC;IAAD,CA/BA,AA+BC,IAAA;IA/BY,kBAAS,YA+BrB,CAAA;AACL,CAAC,EAlCM,QAAQ,KAAR,QAAQ,QAkCd","file":"managers/collision.js","sourcesContent":["module managers {\r\n    // COLLISION MANAGER CLASS\r\n    export class Collision {\r\n        // PRIVATE INSTANCE VARIABLES\r\n        private _player: objects.Player;\r\n        constructor(player:objects.Player) {\r\n            this._player = player;\r\n        }\r\n        \r\n        public distance(startPoint:createjs.Point, endPoint:createjs.Point):number {\r\n            return Math.sqrt(Math.pow((endPoint.x - startPoint.x),2) + Math.pow(endPoint.y - startPoint.y,2))\r\n        }\r\n        \r\n        public check(object:objects.GameObject) {\r\n            var startPoint:createjs.Point = new createjs.Point();\r\n            var endPoint:createjs.Point = new createjs.Point();\r\n            var playerHalfHeight:number = this._player.height * 0.5;\r\n            var objectHalfHeight:number = object.height * 0.5;\r\n            var minimumDistance:number = playerHalfHeight + objectHalfHeight;\r\n            \r\n            startPoint.x = this._player.x;\r\n            startPoint.y = this._player.y;\r\n            \r\n            endPoint.x = object.centerX + object.x;\r\n            endPoint.y = object.centerY + object.y;\r\n            \r\n            \r\n            /* check if the distance between the player and \r\n              the other object is less than the minimum distance */\r\n            if(this.distance(startPoint, endPoint) < minimumDistance) {\r\n                this._player.registerCollision(object);\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}